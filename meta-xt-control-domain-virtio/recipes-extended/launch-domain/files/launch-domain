#!/bin/sh

GUEST_DOMAIN_NAME=$1
GUEST_DOMAIN_XEN_CONFIGURATION=$2
GUEST_DOMAIN_ID=""

create_domain() {
    echo "Creating ${GUEST_DOMAIN_NAME}"
    /usr/sbin/xl create ${GUEST_DOMAIN_XEN_CONFIGURATION}
    echo "Created ${GUEST_DOMAIN_NAME}"

    # Fetch Xen guest domain identifier
    while [ "$GUEST_DOMAIN_ID" == "" ]; do
        GUEST_DOMAIN_ID=$(xl domid ${GUEST_DOMAIN_NAME} 2>/dev/null)

        if [ "$GUEST_DOMAIN_ID" = "" ]; then
            sleep 1
        else
            echo "Parsed ${GUEST_DOMAIN_NAME} id is '${GUEST_DOMAIN_ID}'"
        fi
    done
}

clean_up_domain() {
    if [ "$GUEST_DOMAIN_ID" != "" ]; then
        echo "Cleaning up ${GUEST_DOMAIN_NAME} domain with id ${GUEST_DOMAIN_ID}"

        # Here we re-fetch domain id by intention.
        # If there is no domain id available, probably the user of the system
        # has called "xl destroy" explicitly, so there is no need to call
        # it the second time.
        local GUEST_DOMAIN_ID_LOCAL=$(xl domid ${GUEST_DOMAIN_NAME} 2>/dev/null)

        local XL_DESTROY_PID=""

        if [ "$GUEST_DOMAIN_ID_LOCAL" != "" ]; then
            echo "Destroying ${GUEST_DOMAIN_NAME}"
            /usr/sbin/xl destroy ${GUEST_DOMAIN_NAME} &
            XL_DESTROY_PID=$!
            echo "Destroyed ${GUEST_DOMAIN_NAME}"
        else
            echo "Was not able to fetch ${GUEST_DOMAIN_NAME} domain id. Skip destroying the domain."
        fi

        echo "Updating virtio statuses in the xen-store."

        for i in `xenstore-ls /libxl/${GUEST_DOMAIN_ID}/device/virtio | grep 'backend =' | awk '{gsub(/\"/, "", $3); print $3}'`
        do
            xenstore-write $i/state "6"
            xenstore-write $i/online "0"
        done

        echo "Updated virtio statuses in the xen-store."

        if [ "$XL_DESTROY_PID" != "" ]; then
            echo "Waiting for 'xl destroy' to release."
            wait ${XL_DESTROY_PID}
            echo "'xl destroy' has released."
        fi

        echo "Cleaned up ${GUEST_DOMAIN_NAME} domain with id ${GUEST_DOMAIN_ID}"
    else
        echo "No id of ${GUEST_DOMAIN_NAME} available. Skip destroying and cleaning up the domain."
    fi
}

monitor_domain() {
    echo "${GUEST_DOMAIN_NAME} restart monitor started!"

    local DOMD_ID=$(xl domid DomD)
    echo "Parsed DOMD_ID is '${DOMD_ID}'"

    # We assume that at least 1 qemu virtio backend is always available.
    XS_PATH="/local/domain/$DOMD_ID/backend/qvirtio/${GUEST_DOMAIN_ID}/0/state"
    local QVIRTIO_STATUS="unknown"

    while true; do
        if [ "$QVIRTIO_STATUS" = "unknown" ]; then
            xenstore-watch -n1 $XS_PATH > /dev/null
        else
            xenstore-watch -n2 $XS_PATH > /dev/null
        fi

        local QVIRTIO_NEW_STATUS=`xenstore-read $XS_PATH || true`

        echo "'QVIRTIO_NEW_STATUS status is '$QVIRTIO_NEW_STATUS'."
        if [ "$QVIRTIO_NEW_STATUS" != "$QVIRTIO_STATUS" ]; then
            if [ "$QVIRTIO_NEW_STATUS" = "1" ]; then
                echo "Domain '${GUEST_DOMAIN_NAME}' has become available."
            elif [ "$QVIRTIO_NEW_STATUS" = "6" -a "$QVIRTIO_STATUS" != "unknown" ]; then
                echo "Domain '${GUEST_DOMAIN_NAME}' with id '${GUEST_DOMAIN_ID}' has become unavailable."
                clean_up_domain
                echo "Exiting with status 1."
                exit 1
            fi
        fi

        QVIRTIO_STATUS=$QVIRTIO_NEW_STATUS
    done
}

terminate() {
    echo "Received SIGTERM signal..."
    clean_up_domain
    echo "Exiting with status 0."
    exit 0
}

trap 'terminate' SIGTERM

create_domain
monitor_domain
